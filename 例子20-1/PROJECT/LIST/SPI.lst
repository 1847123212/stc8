C51 COMPILER V9.52.0.0   SPI                                                               05/19/2015 16:46:49 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE SPI
OBJECT MODULE PLACED IN .\OUTPUT\SPI.obj
COMPILER INVOKED BY: D:\Program Files\KeilC51v5\C51\BIN\C51.EXE ..\STC_LIB\SPI.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.
                    -\LIST\SPI.lst) OBJECT(.\OUTPUT\SPI.obj)

line level    source

   1          
   2          /////////////////////////////////////////////////////////
   3          //此库函数是cocoguojia根据STC官方例程资料更改的SPI库
   4          /////////////////////////////////////////////////////////
   5          
   6          //------------------------------------------------
   7          //头文件
   8          #include "SPI.h"
   9          
  10          //------------------------------------------------------------------------
  11          //注意:
  12          //以下库函数都是建立在
  13          //SPI_SSIG=DISABLE-->SPCTL的位4 MSTR 来确定主机还是从机
  14          //SPI_Mode=SPI_Mode_Master主机 
  15          //的情况下的
  16          //一般用mcu的SPI 就是主机模式 这个模式最常用
  17          //虽然初始化的时候我可以设置成其它模式,但我的库函数只支持上面我说的设置
  18          
  19          //------------------------------------------------
  20          //预定义
  21          #define SPI_BUF_LENTH   32
  22          #define SPI_BUF_type    idata
  23          
  24          //------------------------------------------------
  25          //静态变量
  26          static u8       SPI_TxWrite;
  27          static u8       SPI_TxRead;
  28          static u8       SPI_BUF_type SPI_TxBuffer[SPI_BUF_LENTH];
  29          
  30          static u8       SPI_RxWrite;
  31          static u8       SPI_RxRead;
  32          static u8       SPI_BUF_type SPI_RxBuffer[SPI_BUF_LENTH];
  33          
  34          //------------------------------------------------------------------------
  35          //全局函数
  36          //void  SPI_Init                        (SPI_InitTypeDef *SPIx);    //SPI初始化程序.
  37          //void  SPI_SetMode                     (u8 mode);                  //SPI设置主从模式函数.
  38          //void  SPI_WriteByteToTxBuf            (u8 dat);                   //SPI装载要发送的1个字节 但先不发送
  39          //void  SPI_WriteNByteToTxBuf           (u8 *sp,u8 num);            //SPI装载要发送的N个字节 但先不发送
  40          //void  SPI_TrigTx                      (void);                     //触发SPI发送函数, 将发送缓冲的数据发出
  41          //u8    SPI_SPI_ReadByteToRxBuf         (void);                     //SPI从读缓冲区里读出1个字节
  42          //u8    SPI_SPI_ReadTheNByteToRxBuf     (u8 num);                   //SPI从读缓冲区里读出第N个字节 之前的N
             --1个字节都丢弃
  43          
  44          ///////////////////////////////////////////////////////////////
  45          //全局函数
  46          
  47          /////////////////////////////////////////////////////////////////////
  48          // 函数: void   SPI_Init(SPI_InitTypeDef *SPIx)
  49          // 描述: SPI初始化程序.
  50          // 参数: SPIx: 结构参数,请参考spi.h里的定义.
  51          void    SPI_Init(SPI_InitTypeDef *SPIx)
  52          {
  53   1              if(SPIx->SPI_SSIG == ENABLE)                    SPCTL &= ~(1<<7);       //enable SS, conform Master or Slave by SS pin. 目前只支
C51 COMPILER V9.52.0.0   SPI                                                               05/19/2015 16:46:49 PAGE 2   

             -持DISABLE
  54   1              else                                                                    SPCTL |=  (1<<7);       //disable SS, conform Master or Slave by SPI_Mode
  55   1              if(SPIx->SPI_Module == ENABLE)                  SPCTL |=  (1<<6);       //SPI enable
  56   1              else                                                                    SPCTL &= ~(1<<6);       //SPI disable
  57   1              if(SPIx->SPI_FirstBit == SPI_LSB)               SPCTL |=  (1<<5);       //LSB first
  58   1              else                                                                    SPCTL &= ~(1<<5);       //MSB first
  59   1              if(SPIx->SPI_Mode == SPI_Mode_Slave)    SPCTL &= ~(1<<4);       //slave  目前只支持SPI_Mode_Master
  60   1              else                                                                    SPCTL |=  (1<<4);       //master
  61   1              if(SPIx->SPI_CPOL == SPI_CPOL_High)             SPCTL |=  (1<<3);       //SCLK Idle High, Low Active.
  62   1              else                                                                    SPCTL &= ~(1<<3);       //SCLK Idle Low, High Active.
  63   1              if(SPIx->SPI_CPHA == SPI_CPHA_2Edge)    SPCTL |=  (1<<2);       //sample at the second edge
  64   1              else                                                                    SPCTL &= ~(1<<2);       //sample at the first  edge
  65   1              if(SPIx->SPI_Interrupt == ENABLE)               IE2 |=  (1<<1);     //目前只支持ENABLE
  66   1              else                                                                    IE2 &= ~(1<<1);
  67   1              SPCTL = (SPCTL & ~3) | (SPIx->SPI_Speed & 3);                                   //set speed
  68   1              AUXR1 = (AUXR1 & ~(3<<2)) | SPIx->SPI_IoUse;    
  69   1      }
  70          
  71          ///////////////////////////////////////////////////////////////////////
  72          // 函数: void   SPI_SetMode(u8 mode)
  73          // 描述: SPI设置主从模式函数.
  74          // 参数: mode: 指定模式,取值 SPI_Mode_Master 或 SPI_Mode_Slave
  75          // 注意: 目前只支持SPI_Mode_Master
  76          void    SPI_SetMode(u8 mode)
  77          {
  78   1              if(mode == SPI_Mode_Slave)      
  79   1          {
  80   2              SPCTL &= ~(1<<4);       //slave
  81   2          }
  82   1              else
  83   1          {
  84   2              SPCTL |=  (1<<4);       //master
  85   2          }
  86   1      }
  87          
  88          //////////////////////////////////////////////////////////////
  89          // 函数: void SPI_WriteByteToTxBuf(u8 dat)
  90          // 描述: SPI装载发要发送的1个字节 但先不发送
  91          // 参数: dat: 要发送的值
  92          void SPI_WriteByteToTxBuf(u8 dat)       //写入发送缓冲，指针+1
  93          {
  94   1              SPI_TxBuffer[SPI_TxWrite] = dat;
  95   1              if(++SPI_TxWrite >= SPI_BUF_LENTH)      
  96   1          {
  97   2              SPI_TxWrite = 0;
  98   2          }
  99   1      }
 100          
 101          //////////////////////////////////////////////////////////////
 102          // 函数: void SPI_WriteNByteToTxBuf(u8 *sp,u8 num)
 103          // 描述: SPI装载要发送的N个字节 但先不发送
 104          // 参数: *sp: 指向要发送的N个字节的首地址
 105          //       num: 要装载字节的数量  不要超过SPI_BUF_LENTH
 106          // 注意: SPI_BUF_LENTH长度问题
 107          void    SPI_WriteNByteToTxBuf(u8 *sp,u8 num)
 108          {
 109   1          u8 i=num;
 110   1          u8 *spp=sp;
 111   1          if(num>SPI_BUF_LENTH)
 112   1          {
 113   2              ;
 114   2          }
C51 COMPILER V9.52.0.0   SPI                                                               05/19/2015 16:46:49 PAGE 3   

 115   1          else
 116   1          {
 117   2             for(i=0;i<num;i++)
 118   2             {
 119   3                  SPI_WriteByteToTxBuf(*spp);
 120   3                  spp++;
 121   3             } 
 122   2          }
 123   1      }
 124          
 125          //////////////////////////////////////////////////////////////////////////////
 126          // 函数: void   SPI_TrigTx(void)
 127          // 描述: 触发SPI发送函数, 将发送缓冲的数据发出
 128          void SPI_TrigTx(void)
 129          {
 130   1              u8      i;
 131   1              if(SPI_TxRead == SPI_TxWrite)
 132   1          {
 133   2              ;
 134   2          }
 135   1          else
 136   1          {
 137   2                  SPI_SetMode(SPI_Mode_Master);
 138   2                  i = SPI_TxBuffer[SPI_TxRead];
 139   2                  if(++SPI_TxRead >= SPI_BUF_LENTH)
 140   2              {
 141   3                      SPI_TxRead = 0;
 142   3              }
 143   2                  SPDAT = i;
 144   2          }
 145   1      }
 146          
 147          //////////////////////////////////////////////////////////////
 148          // 函数: u8 SPI_SPI_ReadByteToRxBuf(void)
 149          // 描述: SPI从读缓冲区里读出1个字节
 150          // 返回参数:读出这个字节的值
 151          // 注意: 程序员要保证缓冲区里确实至少有1个还没有读出的数据
 152          u8 SPI_SPI_ReadByteToRxBuf(void)
 153          {
 154   1          u8 dat;
 155   1          if(SPI_RxRead==SPI_RxWrite)
 156   1          {
 157   2               return 0;//返回的0 不是读出的值 而是缓冲区里没有要读出的数据
 158   2          }
 159   1          else
 160   1          {
 161   2                  dat=SPI_RxBuffer[SPI_RxRead];
 162   2                  if(++SPI_RxRead >= SPI_BUF_LENTH)   
 163   2              {
 164   3                  SPI_RxRead = 0;
 165   3              }
 166   2          }
 167   1          return dat;
 168   1      }
 169          
 170          //////////////////////////////////////////////////////////////
 171          // 函数: u8 SPI_SPI_ReadByteToRxBuf(void)
 172          // 描述: SPI从读缓冲区里读出第N个字节 之前的N-1个字节都丢弃
 173          // 返回参数:读出这个字节的值
 174          // 注意: 程序员要保证缓冲区里确实至少有N个还没有读出的数据
 175          // 注意: SPI_BUF_LENTH长度问题
 176          u8 SPI_SPI_ReadTheNByteToRxBuf(u8 num)
C51 COMPILER V9.52.0.0   SPI                                                               05/19/2015 16:46:49 PAGE 4   

 177          {
 178   1          u8 i=num;
 179   1          u8 dat;
 180   1        
 181   1          if(i>SPI_BUF_LENTH)
 182   1          {
 183   2               return 0;//返回的0 不是读出的值 而是形式参数不合法
 184   2          }
 185   1          else
 186   1          {
 187   2              while(i>1)
 188   2              {
 189   3                  SPI_SPI_ReadByteToRxBuf();
 190   3                  i--;
 191   3              }
 192   2              dat=SPI_SPI_ReadByteToRxBuf();
 193   2              return dat;
 194   2          }
 195   1      }
 196          
 197          ////////////////////////////////////////////////////////////////////
 198          // 函数: void SPI_Transivion (void) interrupt SPI_VECTOR
 199          // 描述: SPI中断函数.
 200          void SPI_Transivion (void) interrupt SPI_VECTOR
 201          {
 202   1              if(SPI_TxRead != SPI_TxWrite)
 203   1              {
 204   2              //在写数据之前先读出SPDAT
 205   2              SPI_RxBuffer[SPI_RxWrite] = SPDAT ;
 206   2                  if(++SPI_RxWrite >= SPI_BUF_LENTH)  
 207   2              {
 208   3                  SPI_RxWrite = 0;
 209   3              }
 210   2      
 211   2                      SPDAT = SPI_TxBuffer[SPI_TxRead];
 212   2                      if(++SPI_TxRead >= SPI_BUF_LENTH)       
 213   2              {
 214   3                      SPI_TxRead = 0;
 215   3              }
 216   2              }
 217   1              SPSTAT = SPIF + WCOL;   //清0 SPIF和WCOL标志
 218   1      }
 219          
 220          
 221          
 222          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    394    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     64    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
