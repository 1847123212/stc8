C51 COMPILER V9.52.0.0   EEPROM                                                            05/19/2015 16:46:47 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\OUTPUT\eeprom.obj
COMPILER INVOKED BY: D:\Program Files\KeilC51v5\C51\BIN\C51.EXE ..\STC_LIB\eeprom.c LARGE BROWSE DEBUG OBJECTEXTEND PRIN
                    -T(.\LIST\eeprom.lst) OBJECT(.\OUTPUT\eeprom.obj)

line level    source

   1          
   2          //      本程序是STC系列的内置EEPROM读写程序。
   3          #include "eeprom.h"
   4          
   5          
   6          //========================================================================
   7          // 函数: void   ISP_Disable(void)
   8          // 描述: 禁止访问ISP/IAP.
   9          // 参数: non.
  10          // 返回: non.
  11          // 版本: V1.0, 2012-10-22
  12          //========================================================================
  13          void    DisableEEPROM(void)
  14          {
  15   1              ISP_CONTR = 0;                  //禁止ISP/IAP操作
  16   1              ISP_CMD   = 0;                  //去除ISP/IAP命令
  17   1              ISP_TRIG  = 0;                  //防止ISP/IAP命令误触发
  18   1              ISP_ADDRH = 0xff;               //清0地址高字节
  19   1              ISP_ADDRL = 0xff;               //清0地址低字节，指向非EEPROM区，防止误操作
  20   1      }
  21          
  22          //========================================================================
  23          // 函数: void EEPROM_read_n(u16 EE_address,u8 *DataAddress,u16 number)
  24          // 描述: 从指定EEPROM首地址读出n个字节放指定的缓冲.
  25          // 参数: EE_address:  读出EEPROM的首地址.
  26          //       DataAddress: 读出数据放缓冲的首地址.
  27          //       number:      读出的字节长度.
  28          // 返回: non.
  29          // 版本: V1.0, 2012-10-22
  30          //========================================================================
  31          
  32          void EEPROM_read_n(u16 EE_address,u8 *DataAddress,u16 number)
  33          {
  34   1              EA = 0;         //禁止中断
  35   1              ISP_CONTR = (ISP_EN + ISP_WAIT_FREQUENCY);      //设置等待时间，允许ISP/IAP操作，送一次就够
  36   1              ISP_READ();                                                                     //送字节读命令，命令不需改变时，不需重新送命令
  37   1              do
  38   1              {
  39   2                      ISP_ADDRH = EE_address / 256;           //送地址高字节（地址需要改变时才需重新送地址）
  40   2                      ISP_ADDRL = EE_address % 256;           //送地址低字节
  41   2                      ISP_TRIG();                                                     //先送5AH，再送A5H到ISP/IAP触发寄存器，每次都需要如此
  42   2                                                                                              //送完A5H后，ISP/IAP命令立即被触发启动
  43   2                                                                                              //CPU等待IAP完成后，才会继续执行程序。
  44   2                      _nop_();
  45   2                      *DataAddress = ISP_DATA;                        //读出的数据送往
  46   2                      EE_address++;
  47   2                      DataAddress++;
  48   2              }while(--number);
  49   1      
  50   1              DisableEEPROM();
  51   1              EA = 1;         //重新允许中断
  52   1      }
  53          
  54          
C51 COMPILER V9.52.0.0   EEPROM                                                            05/19/2015 16:46:47 PAGE 2   

  55          /******************** 扇区擦除函数 *****************/
  56          //========================================================================
  57          // 函数: void EEPROM_SectorErase(u16 EE_address)
  58          // 描述: 把指定地址的EEPROM扇区擦除.
  59          // 参数: EE_address:  要擦除的扇区EEPROM的地址.
  60          // 返回: non.
  61          // 版本: V1.0, 2013-5-10
  62          //========================================================================
  63          void EEPROM_SectorErase(u16 EE_address)
  64          {
  65   1              EA = 0;         //禁止中断
  66   1                                                                                              //只有扇区擦除，没有字节擦除，512字节/扇区。
  67   1                                                                                              //扇区中任意一个字节地址都是扇区地址。
  68   1              ISP_ADDRH = EE_address / 256;                   //送扇区地址高字节（地址需要改变时才需重新送地址）
  69   1              ISP_ADDRL = EE_address % 256;                   //送扇区地址低字节
  70   1              ISP_CONTR = (ISP_EN + ISP_WAIT_FREQUENCY);      //设置等待时间，允许ISP/IAP操作，送一次就够
  71   1              ISP_ERASE();                                                    //送扇区擦除命令，命令不需改变时，不需重新送命令
  72   1              ISP_TRIG();
  73   1              _nop_();
  74   1              DisableEEPROM();
  75   1              EA = 1;         //重新允许中断
  76   1      }
  77          
  78          //========================================================================
  79          // 函数: void EEPROM_write_n(u16 EE_address,u8 *DataAddress,u16 number)
  80          // 描述: 把缓冲的n个字节写入指定首地址的EEPROM.
  81          // 参数: EE_address:  写入EEPROM的首地址.
  82          //       DataAddress: 写入源数据的缓冲的首地址.
  83          //       number:      写入的字节长度.
  84          // 返回: non.
  85          // 版本: V1.0, 2012-10-22
  86          //========================================================================
  87          void EEPROM_write_n(u16 EE_address,u8 *DataAddress,u16 number)
  88          {
  89   1              EA = 0;         //禁止中断
  90   1      
  91   1              ISP_CONTR = (ISP_EN + ISP_WAIT_FREQUENCY);      //设置等待时间，允许ISP/IAP操作，送一次就够
  92   1              ISP_WRITE();                                                    //送字节写命令，命令不需改变时，不需重新送命令
  93   1              do
  94   1              {
  95   2                      ISP_ADDRH = EE_address / 256;           //送地址高字节（地址需要改变时才需重新送地址）
  96   2                      ISP_ADDRL = EE_address % 256;           //送地址低字节
  97   2                      ISP_DATA  = *DataAddress;                       //送数据到ISP_DATA，只有数据改变时才需重新送
  98   2                      ISP_TRIG();
  99   2                      _nop_();
 100   2                      EE_address++;
 101   2                      DataAddress++;
 102   2              }while(--number);
 103   1      
 104   1              DisableEEPROM();
 105   1              EA = 1;         //重新允许中断
 106   1      }
 107          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    172    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      14
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.52.0.0   EEPROM                                                            05/19/2015 16:46:47 PAGE 3   

   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
